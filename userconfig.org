#+TITLE: Spacemacs User Configuration
#+AUTHOR: Durant Schoon

* Orient yourself

This file contains literate elisp code which is loaded from
dotspacemacs/user-config in [[file:init.el]].

Although I'm beginning to think I should just make layers instead of having a
file like this.

* Literate [[https://learnxinyminutes.com/docs/elisp/][elisp]], hooray!

I'm very happy to see that using org-babel-load-file works with a user
configuration. I searched to see if someone had set this up with spacemacs and
found this [[https://github.com/syl20bnr/spacemacs/issues/7091][link]] to an issue. I tested the code and it worked out-of-the-box for
me!

I'll soon start porting over more things I'm missing my non-spacemacs [[https://github.com/durantschoon/.emacs.d/blob/master/config.org][config.org]] 

Any packages loaded here I also include (alphabetized) in
dotspacemacs-additional-packages. An alternative listed [[https://github.com/syl20bnr/spacemacs/blob/master/doc/FAQ.org#why-are-packages-installed-with-package-install-automatically-deleted-by-spacemacs-when-it-boots][here]] would be to:

#+begin_quote
set the variable dotspacemacs-install-packages to used-but-keep-unused which
will prevent Spacemacs from removing the packages you installed manually.
#+end_quote

but my personal choice is to double list them (then I can see them alphabetized
as well) and keep automatical removal of unused packages.

#+begin_src emacs-lisp

  ;;; key-bindings I immediately miss
  (global-set-key (kbd "M-s s") 'helm-swoop)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)


  ;;; try these new ones
  (global-set-key (kbd "C-c f") 'select-frame-by-name)
  
  ;;; enable easy-templates in org-mode
  (require 'org-tempo)
  ;;; need to recompile all elc files to get org-archive-subtree to work
  ;;; https://github.com/syl20bnr/spacemacs/issues/11801

  ;;; Spacemacs need frame titles (helps with viewing multiple frames)
  (setq-default frame-title-format
                '((:eval (if (buffer-file-name)
                             (abbreviate-file-name (buffer-file-name))
                           "%b"))))

  ;; python
  (pyvenv-workon "default") ;; todo: define this for home vs. work
  (add-hook 'live-py-mode-hook (lambda ()
                                 (progn
                                   (setq-default live-py-version (executable-find "python"))
                                   (live-py-update-all))))

  ;; new!
  (use-package unfill
    :bind ([remap fill-paragraph] . unfill-toggle))


  (add-to-list 'auto-mode-alist '("\\.libsonnet\\'" . jsonnet-mode))

  (defun my-after-save-actions ()
    "Used in `after-save-hook'."
    (if (string= "py" (file-name-extension (buffer-name)))
        (if (member "Makefile" (projectile-current-project-files))
            (let ((default-directory (projectile-project-root))
                  (can-lint-p
                   (not (string= "" (shell-command-to-string "grep lint: Makefile"))))
                  (can-test-p
                   (not (string= "" (shell-command-to-string "grep test: Makefile")))))
              (if can-lint-p
                  (comint-send-string (get-buffer-process (shell)) "make lint\n")))
          ;; (if can-test-p
          ;;     (comint-send-string (get-buffer-process (shell)) "make test\n"))
          )))

  (add-hook 'after-save-hook 'my-after-save-actions)

  (push '("*shell*" :height 10 :position bottom) popwin:special-display-config)

  ;; to use org-link-jira-from-middle:
  ;; paste into a new line: PTS-XYZ-link title text here
  ;; place cursor between link and title, then run the macro
  (fset 'org-link-jira-from-middle
        [?\C-  ?\C-a ?\M-\\ ?\C-x ?\C-x ?\C-w ?\[ ?\[ ?\C-f ?\C-f backspace ?\C-b ?\C-y ?\C-  ?\M-b ?\M-b ?\C-w ?\C-y ?\C-f ?\[ ?\C-y ?\C-f ?\] ?\C-a tab])

#+end_src

* Settings
** Package management
*** install use-package-chords first so other modes can use them

see also chords with package avy

#+BEGIN_SRC emacs-lisp
  (use-package use-package-chords
    :ensure t
    :config
    (key-chord-mode 1)
    (key-chord-define-global "hh" 'win-swap-horizontal)
    (key-chord-define-global "vv" 'win-swap-vertical)
    (key-chord-define-global "ww" 'toggle-window-split))
#+END_SRC
** Global Key Bindings (Alphabetical by description)
*** Completion
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-M-/") 'comint-dynamic-complete-filename)
    #+END_SRC
*** New lines
    #+BEGIN_SRC emacs-lisp
      (define-key global-map (kbd "RET") 'newline-and-indent)
    #+END_SRC

*** Darwin, OS X

    ;; key bindings
    ;; http://ergoemacs.org/emacs/emacs_hyper_super_keys.html

    #+BEGIN_SRC emacs-lisp
      (when (eq system-type 'darwin)          ; mac specific settings
        ;; ---------- REMAP KEYS ----------
        ;; (setq mac-option-modifier 'alt)    ; not needed, I think
        (setq mac-command-modifier 'meta)
        (setq mac-option-modifier 'super)     ; make opt key do Super
        (setq mac-control-modifier 'control)  ; make Control key do Control
        (setq ns-function-modifier 'hyper)    ; make Fn key do Hyper
        ;; ---------- SCROLLING ----------    ; for trackpads
        (global-set-key [wheel-right] 'scroll-left)
        (global-set-key [wheel-left] 'scroll-right)
        )
      (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
    #+END_SRC

*** frames (really windows) and windows (really panes)

    #+BEGIN_SRC emacs-lisp
      (when (eq system-type 'darwin)          ; mac specific settings
        (global-set-key "\M-`" 'other-frame)  ; act like other mac programs
        )

      (global-set-key [(meta down)] 'scroll-other-window)    ; C-M-v
      (global-set-key [(meta up)] 'scroll-other-window-down) ; C-M-S-v

      ; was just f11, bad on Darwin
      ; similar to M-<f10> which is toggle-frame-maximized
      (global-set-key (kbd "M-<f11>") 'toggle-frame-fullscreen)

      (global-set-key (kbd "C-x 4 o") 'switch-to-buffer-other-window-return)
      (global-set-key (kbd "C-x 4 k") 'kill-buffer-other-window)

      (require 'windmove)

      (defun win-swap-horizontal ()
        "Swap windows left/right using buffer-move.el"
        (interactive)
        (if (null (windmove-find-other-window 'right))
            (buf-move-left) (buf-move-right)))

      (global-set-key (kbd "C-c h") 'win-swap-horizontal)

      (defun win-swap-vertical ()
        "Swap windows up/down using buffer-move.el"
        (interactive)
        (if (null (windmove-find-other-window 'above))
            (buf-move-down) (buf-move-up)))

      (global-set-key (kbd "C-c v") 'win-swap-vertical)

      (defun switch-to-buffer-other-window-return ()
        "Like `switch-to-buffer-other-window`, but return to original buffer."
        (interactive)
        (switch-to-buffer-other-window (other-buffer))
        (other-window 1))

      (defun kill-buffer-other-window ()
        "Kill the buffer in the other window.
      I usually work with 2 windows side by side so when I do anything
      that opens a buffer in the other window (eg. looking at a function
      definition), I'll want to kill it after when I'm done. That's when
      I use kill-buffer-other-window."
        (interactive)
        (other-window 1)
        (kill-buffer (current-buffer))
        (other-window 1))

      ;; toggle-window-split
      ;; See https://www.emacswiki.org/emacs/ToggleWindowSplit
      (defun toggle-window-split ()
        (interactive)
        (if (= (count-windows) 2)
            (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                           (car next-win-edges))
                           (<= (cadr this-win-edges)
                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                   (car (window-edges (next-window))))
                'split-window-horizontally
              'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))

      (global-set-key (kbd "C-x |") 'toggle-window-split)
        #+END_SRC

*** Function Keys (f1-f4: defined by emacs f5-...: user customization)

    #+BEGIN_SRC emacs-lisp
      (global-set-key [f5] 'global-whitespace-mode)
      (global-set-key [f6] 'toggle-truncate-lines)
    #+END_SRC

*** OFF search

    Testing this. I'm not convinced I like everything about it.
    phi-search works with multiple cursors.

    #+BEGIN_SRC emacs-lisp :tangle no
      (global-set-key (kbd "C-s") 'phi-search)
      (global-set-key (kbd "C-r") 'phi-search-backward)
    #+END_SRC

*** web

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c o") 'browse-url-at-point) ; like "o"pen
    #+END_SRC

*** web development

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "H-o") 'browse-url-of-buffer) ; like "o"pen
    #+END_SRC

*** zap-up-to-char
    
    From [[https://www.emacswiki.org/emacs/ZapUpToChar][ZapUpToChar]] (replaces zap-to-char so it doesn't zap the char itself)

    #+BEGIN_SRC emacs-lisp
      (defadvice zap-to-char (after my-zap-to-char-advice (arg char) activate)
        "Kill up to the ARG'th occurence of CHAR, and leave CHAR. If
        you are deleting forward, the CHAR is replaced and the point is
        put before CHAR"
        (insert char)
        (if (< 0 arg) (forward-char -1)))
    #+END_SRC

* Modes (Alphabetical)
** Avy (newer version of ace-jump-mode)

   Try chords with avy.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :chords (("jj" . avy-goto-char)   ; type the character rapidly
             ("jk" . avy-goto-char-2) ; type the first 2 characters rapidly
             ("jl" . avy-goto-line)
             ("jw" . avy-goto-word-1) ; type 1st char for beginnings of words
             ))
#+END_SRC

   Just for my notes, if I don't like this, I can try the suggested
   bindings with this:

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package avy
    :bind (("C-:" . avy-goto-char)    ; conflicts with helm-company
           ("C-'" . avy-goto-char-2)
           ("M-g f" . avy-goto-line)
           ))
#+END_SRC

** Buffer move

#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t
    :bind (("<C-s-up>"    . buf-move-up) ; Control-super-up
           ("<C-s-down>"  . buf-move-down)
           ("<C-s-left>"  . buf-move-left)
           ("<C-s-right>" . buf-move-right)))
#+END_SRC

** Expand Region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC
** Multiple Cursors

   For some reason I need to require 'cl. Some of the mc libraries
   require 'cl-lib, but that doesn't seem to be enough.

   Refer to the [[https://github.com/magnars/multiple-cursors.el][source]] for examples.

   #+begin_src emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :init
       (require 'cl)
       :bind (("C-S-c C-S-c" . mc/edit-lines)
              ("C->"         . mc/mark-next-like-this)
              ("C-<"         . mc/mark-previous-like-this)
              ("C-c C-<"     . mc/mark-all-like-this)
              ("C-!"         . mc/mark-next-symbol-like-this)
              ("s-r"         . mc/mark-all-in-region)
              ("s-d"         . mc/mark-all-dwim)))
   #+end_src

   "s-d" is super-d (I've bound super to option)

   Special:

   mc/mark-sgml-tag-pair: Mark the current opening and closing tag.
                          Also try mc/mark-all-like-this-dwim in a tag

   Mark the region, then
   mc/edit-beginnings-of-lines

   mc/insert-numbers: Insert increasing numbers for each cursor, top to bottom.
                      mv/i-n
   mc/insert-letters: Insert increasing letters for each cursor, top to bottom.
                      mv/i-l

*** To use:

**** replacing the same word

     If you have

     print "foo", foo, a third time foo
     here is foo on the next line
     and on line 3, here is foo too

     You can change foo in the first line and the next foo to bar:
     1. Select the first foo in a region (move to 1st f, C-space, M-f)
     2. C-> (to start multiple-cursors)
     3. type "bar"
     4. C-g or <return> to end

     You can change foo in the first two lines only:
     1. select the firs two lines only
     2. s-r (for mc/mark-all-in-region)
     3. type bar
     4. return

**** replacing a similar pattern of symbols

     If you have

     foo: one
     barr: two
     bazzz: three
     quux: four

     You can select ": " and mc/mark-all-like-this or s-d for
     mc/mark-all-dwim, then start typing (you'll need to retype ": "
     or you can kill and yank it back, first thing if you want to keep
     it).

     While editing, you can use C-' to hide all non-edited text

     test: this is extra text, not to be modified

* Run Last

  Open file work_init.el or home_init.el depending on which computer
  I'm on. Since they don't belong in my repo they are listed in my
  .gitignore file.

  I use these files to open default files and set the initial window
  size.

  #+BEGIN_SRC emacs-lisp
    (setq locations '("home" "work"))
    (dolist (loc locations)
      (let ((init-file (concat "~/.spacemacs.d/" (concat loc "_init.el"))))
        (if (file-exists-p init-file)
            (progn
              (message (concat "loading " init-file))
              (load init-file)))))
  #+END_SRC
